import os
import operator
import itertools
import math
import random
# values for the different indices of g,s,n,p
valsG = [[[0,0,0],1],[[0,0,1],0.5],[[0,1,0],0.5],[[0,1,1],0.25],[[1,0,1],0.5],[[1,0,2],1],[[1,1,0],0.5],[[1,1,1],0.5],[[1,1,2],0.5],[[1,2,0],1],[[1,2,1],0.5],[[2,1,1],0.25],[[2,1,2],0.5],[[2,2,1],0.5],[[2,2,2],1],[[0,0,2],0],[[0,1,2],0],[[0,2,0],0],[[0,2,1],0],[[0,2,2],0],[[1,0,0],0],[[1,2,2],0],[[2,0,0],0],[[2,0,1],0],[[2,0,2],0],[[2,1,0],0],[[2,2,0],0]]
valsS = [[[0,0],1],[[0,1],1],[[0,2],1],[[1,0],1],[[1,1],0.75],[[1,2],0.5],[[2,0],1],[[2,1],0.5],[[2,2],0]]
valsN = [[[1,1],0.25],[[1,2],0.5],[[2,1],0.5],[[2,2],1],[[0,0],0],[[0,1],0],[[0,2],0],[[1,0],0],[[2,0],0]]
valsP = [[[0,0],0.5],[[0,1],0.5],[[0,2],0.5],[[1,0],0.5],[[1,1],0.5],[[1,2],0.25],[[2,0],0.5],[[2,1],0.25],[[2,2],0.5]]
valsGNonZero = [[[0,0,0],1],[[0,0,1],0.5],[[0,1,0],0.5],[[0,1,1],0.25],[[1,0,1],0.5],[[1,0,2],1],[[1,1,0],0.5],[[1,1,1],0.5],[[1,1,2],0.5],[[1,2,0],1],[[1,2,1],0.5],[[2,1,1],0.25],[[2,1,2],0.5],[[2,2,1],0.5],[[2,2,2],1]]
valsSNonZero = [[[0,0],1],[[0,1],1],[[0,2],1],[[1,0],1],[[1,1],0.75],[[1,2],0.5],[[2,0],1],[[2,1],0.5]]
valsNNonZero = [[[1,1],0.25],[[1,2],0.5],[[2,1],0.5],[[2,2],1]]
valsPNonZero = [[[0,0],0.5],[[0,1],0.5],[[0,2],0.5],[[1,0],0.5],[[1,1],0.5],[[1,2],0.25],[[2,0],0.5],[[2,1],0.25],[[2,2],0.5]]


valsGReduced = [
                [[0,0,0],8],
                [[0,0,1],2],
                [[0,1,0],2],
                [[0,1,1],0.5],
                [[1,0,0],4],
                [[1,0,1],1],
                [[1,1,0],1],
                [[1,1,1],0.5],
                ]

def turnToDict(vals):
	ans = {}
	for v in vals:
		key = str(tuple(v[0]))
		val = v[1]
		ans[key] = val
	return ans

valsGDict = turnToDict(valsG)
valsSDict = turnToDict(valsS)
valsNDict = turnToDict(valsN)
valsPDict = turnToDict(valsP)
valsGNonZeroDict = turnToDict(valsGNonZero)
valsSNonZeroDict = turnToDict(valsSNonZero)
valsNNonZeroDict = turnToDict(valsNNonZero)
valsPNonZeroDict = turnToDict(valsPNonZero)


valsGReducedDict = turnToDict(valsGReduced)